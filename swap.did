type CoinBalance = record { id : text; value : nat };
type CoinMeta = record {
  id : text;
  decimals : nat8;
  min_amount : text;
  symbol : text;
};
type ExchangeError = variant {
  InvalidNumeric;
  Overflow;
  TooSmallFunds;
  BtcRequired;
  InvalidPool;
  InvalidPsbt : text;
  PoolAlreadyExists;
  InvalidTxid;
  InvalidLiquidity;
  EmptyPool;
  InvalidRequirements;
  FeeNotEnough;
  ChainKeyError;
  AmountGreaterThanUtxo;
  InsufficientFunds;
};
type InputRune = record {
  tx_id : text;
  vout : nat32;
  btc_amount : nat;
  rune_amount : opt nat;
  rune_id : opt text;
};
type Output = record { balance : CoinBalance; pubkey : text };
type OutputRune = record {
  btc_amount : nat;
  rune_amount : opt nat;
  rune_id : opt text;
};
type Result = variant { Ok : text; Err : ExchangeError };
type Result_1 = variant { Ok; Err : ExchangeError };
type Result_2 = variant { Ok : SwapOffer; Err : ExchangeError };
type Result_3 = variant { Ok : text; Err : text };
type SignPsbtCallingArgs = record {
  method : text;
  tx_id : text;
  nonce : nat64;
  input_runes : vec InputRune;
  output_runes : vec OutputRune;
  pool_id : opt text;
  psbt_hex : text;
};
type SwapOffer = record {
  nonce : nat64;
  maker_input : vec Utxo;
  tx_fee : text;
  price : text;
  outputs : vec Output;
};
type SwapQuery = record { balance : CoinBalance; pubkey : text };
type Utxo = record {
  satoshis : nat64;
  balance : CoinBalance;
  txid : text;
  vout : nat32;
};
service : {
  create : (CoinMeta, CoinMeta) -> (Result);
  mock_add_liquidity : (Utxo, Utxo, text) -> (Result_1);
  pre_swap : (text, SwapQuery) -> (Result_2) query;
  sign_psbt : (SignPsbtCallingArgs) -> (Result_3);
}
