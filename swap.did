type AssetWithOwner = record {
  coin_balance : CoinBalance;
  owner_address : text;
};
type CoinBalance = record { id : text; value : nat };
type CoinMeta = record { id : text; min_amount : nat; symbol : text };
type ExchangeError = variant {
  InvalidNumeric;
  Overflow;
  InvalidInput;
  TooSmallFunds;
  InvalidRuneId;
  InvalidPool;
  InvalidPsbt : text;
  PoolAlreadyExists;
  InvalidTxid;
  InvalidLiquidity;
  EmptyPool;
  LpNotFound;
  ChainKeyError;
  FetchRuneIndexerError;
  InvalidState : text;
  InsufficientFunds;
};
type ExtractFeeOffer = record {
  output : CoinBalance;
  nonce : nat64;
  input : Utxo;
};
type FinalizeTxArgs = record { tx_id : text; pool_key : text };
type InputRune = record {
  tx_id : text;
  coin_balance : opt CoinBalance;
  vout : nat32;
  btc_amount : nat64;
};
type Liquidity = record { user_share : nat; sqrt_k : nat; btc_supply : nat64 };
type LiquidityOffer = record {
  output : CoinBalance;
  inputs : opt Utxo;
  nonce : nat64;
};
type LiquidityPoolWithState = record {
  addr : text;
  meta : CoinMeta;
  pubkey : text;
  state : opt PoolState;
  fee_rate : nat64;
  tweaked : text;
};
type OutputRune = record { coin_balance : opt CoinBalance; btc_amount : nat64 };
type PoolMeta = record {
  id : text;
  name : text;
  coins : vec text;
  address : text;
};
type PoolState = record {
  k : nat;
  id : opt text;
  lp : vec record { text; nat };
  utxo : opt Utxo;
  incomes : nat64;
  nonce : nat64;
};
type ReeInstruction = record {
  input_coins : vec AssetWithOwner;
  method : text;
  output_coins : vec AssetWithOwner;
  exchange_id : text;
  nonce : opt nat64;
  pool_key : opt text;
};
type Result = variant { Ok : text; Err : ExchangeError };
type Result_1 = variant { Ok : Liquidity; Err : ExchangeError };
type Result_2 = variant { Ok : LiquidityOffer; Err : ExchangeError };
type Result_3 = variant { Ok : ExtractFeeOffer; Err : ExchangeError };
type Result_4 = variant { Ok : SwapOffer; Err : ExchangeError };
type Result_5 = variant { Ok : WithdrawalOffer; Err : ExchangeError };
type Result_6 = variant { Ok : text; Err : text };
type SignPsbtArgs = record {
  tx_id : text;
  zero_confirmed_tx_count_in_queue : nat32;
  instruction_index : nat32;
  input_runes : vec InputRune;
  output_runes : vec OutputRune;
  all_instructions : vec ReeInstruction;
  psbt_hex : text;
};
type SwapOffer = record { output : CoinBalance; nonce : nat64; input : Utxo };
type Utxo = record {
  satoshis : nat64;
  balance : CoinBalance;
  txid : text;
  vout : nat32;
};
type WithdrawalOffer = record {
  nonce : nat64;
  input : Utxo;
  user_outputs : vec CoinBalance;
};
service : () -> {
  create : (text) -> (Result);
  finalize_tx : (FinalizeTxArgs) -> ();
  find_pool : (text) -> (opt LiquidityPoolWithState) query;
  get_fee_collector : () -> (text) query;
  get_lp : (text, text) -> (Result_1) query;
  list_pools : () -> (vec PoolMeta) query;
  manually_transfer : (text, nat32, nat64) -> (opt text);
  pre_add_liquidity : (text, CoinBalance) -> (Result_2) query;
  pre_extract_fee : (text) -> (Result_3) query;
  pre_swap : (text, CoinBalance) -> (Result_4) query;
  pre_withdraw_liquidity : (text, text, CoinBalance) -> (Result_5) query;
  rollback_tx : (FinalizeTxArgs) -> ();
  set_fee_collector : (text) -> ();
  set_orchestrator : (principal) -> ();
  sign_psbt : (SignPsbtArgs) -> (Result_6);
}
