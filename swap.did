type CoinBalance = record { id : text; value : nat };
type ExchangeError = variant {
  InvalidNumeric;
  Overflow;
  TooSmallFunds;
  BtcRequired;
  InvalidPool;
  InvalidPsbt : text;
  PoolAlreadyExists;
  InvalidTxid;
  InvalidLiquidity;
  EmptyPool;
  InvalidRequirements;
  FeeNotEnough;
  ChainKeyError;
  AmountGreaterThanUtxo;
  InsufficientFunds;
};
type InputRune = record {
  tx_id : text;
  vout : nat32;
  btc_amount : nat;
  rune_amount : opt nat;
  rune_id : opt text;
};
type InstructionMethod = variant {
  AddLiquidity : record {
    inputs : record { CoinBalance; CoinBalance };
    nonce : nat64;
    pool_id : text;
  };
  Swap : record { nonce : nat64; input : CoinBalance; pool_id : text };
  CreatePool : record { CoinBalance; CoinBalance };
};
type LiquidityOffer = record {
  output : CoinBalance;
  inputs : vec Utxo;
  nonce : nat64;
};
type OutputRune = record {
  btc_amount : nat;
  rune_amount : opt nat;
  rune_id : opt text;
};
type ReeInstruction = record {
  method : InstructionMethod;
  exchange_id : text;
  output_coin_balance : opt CoinBalance;
};
type Result = variant { Ok : LiquidityOffer; Err : ExchangeError };
type Result_1 = variant { Ok : text; Err : ExchangeError };
type Result_2 = variant { Ok : SwapOffer; Err : ExchangeError };
type Result_3 = variant { Ok : text; Err : text };
type SignPsbtCallingArgs = record {
  tx_id : text;
  input_runes : vec InputRune;
  output_runes : vec OutputRune;
  instruction : ReeInstruction;
  psbt_hex : text;
};
type SwapOffer = record {
  output : CoinBalance;
  inputs : vec Utxo;
  nonce : nat64;
};
type Utxo = record {
  satoshis : nat64;
  balance : CoinBalance;
  txid : text;
  vout : nat32;
};
service : {
  pre_add_liquidity : (text, CoinBalance) -> (Result) query;
  pre_create : (CoinBalance, CoinBalance) -> (Result_1);
  pre_swap : (text, CoinBalance) -> (Result_2) query;
  sign_psbt : (SignPsbtCallingArgs) -> (Result_3);
}
