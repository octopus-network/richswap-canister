type CoinBalance = record { id : CoinId; value : nat };
type CoinId = record { tx : nat32; block : nat64 };
type ExchangeError = variant {
  InvalidNumeric;
  Overflow;
  TooSmallFunds;
  InvalidPool;
  InvalidTxid;
  InvalidLiquidity;
  InvalidRequirements;
  FeeNotEnough;
  AmountGreaterThanUtxo;
  InsufficientFunds;
};
type InitArgs = record { x : SerializedUtxo; y : SerializedUtxo; addr : text };
type Output = record { balance : CoinBalance; address : text };
type Result = variant { Ok : SwapOffer; Err : ExchangeError };
type SerializedUtxo = record {
  satoshis : nat64;
  balance : CoinBalance;
  txid : text;
  vout : nat32;
};
type SwapOffer = record {
  maker_input : vec Utxo;
  tx_fee : text;
  price : text;
  outputs : vec Output;
};
type SwapQuery = record { balance : CoinBalance; address : text };
type Utxo = record {
  satoshis : nat64;
  tx_id : vec nat8;
  balance : CoinBalance;
  vout : nat32;
};
service : (InitArgs) -> { preswap : (SwapQuery) -> (Result) query }
