type BlockInfo = record { height : nat32; hash : text };
type CoinBalance = record { id : text; value : nat };
type DonateIntention = record {
  out_rune : CoinBalance;
  out_sats : nat64;
  nonce : nat64;
  input : Utxo;
};
type ExchangeError = variant {
  InvalidSignPsbtArgs : text;
  FundsLimitExceeded;
  UtxoMismatch;
  InvalidNumeric;
  Overflow;
  Paused;
  InvalidInput;
  PoolAddressNotFound;
  PriceImpactLimitExceeded;
  RuneIndexerError : text;
  PoolStateExpired : nat64;
  InvalidSignature;
  TooSmallFunds;
  LiquidityLocked;
  InvalidRuneId;
  InvalidPool;
  InvalidPsbt : text;
  PoolAlreadyExists;
  InvalidTxid;
  InvalidLiquidity;
  BlockSyncing;
  EmptyPool;
  InvalidLockMessage;
  FetchBitcoinCanisterError;
  LpNotFound;
  NoConfirmedUtxos;
  ChainKeyError;
  FetchRuneIndexerError;
  InvalidState : text;
  InsufficientFunds;
};
type ExecuteTxArgs = record {
  zero_confirmed_tx_queue_length : nat32;
  txid : text;
  intention_set : IntentionSet;
  intention_index : nat32;
  psbt_hex : text;
};
type ExtractFeeOffer = record {
  output : CoinBalance;
  nonce : nat64;
  input : Utxo;
};
type GetMinimalTxValueArgs = record {
  zero_confirmed_tx_queue_length : nat32;
  pool_address : text;
};
type GetPoolInfoArgs = record { pool_address : text };
type InputCoin = record { coin : CoinBalance; from : text };
type Intention = record {
  input_coins : vec InputCoin;
  output_coins : vec OutputCoin;
  action : text;
  exchange_id : text;
  pool_utxo_spent : vec text;
  action_params : text;
  nonce : nat64;
  pool_address : text;
  pool_utxo_received : vec Utxo;
};
type IntentionSet = record {
  tx_fee_in_sats : nat64;
  initiator_address : text;
  intentions : vec Intention;
};
type Liquidity = record {
  total_share : nat;
  user_share : nat;
  user_incomes : nat64;
  lock_until : nat32;
};
type LiquidityOffer = record {
  output : CoinBalance;
  inputs : opt Utxo;
  nonce : nat64;
};
type NewBlockInfo = record {
  block_hash : text;
  confirmed_txids : vec text;
  block_timestamp : nat64;
  block_height : nat32;
};
type OutputCoin = record { to : text; coin : CoinBalance };
type PoolBasic = record { name : text; address : text };
type PoolInfo = record {
  key : text;
  name : text;
  btc_reserved : nat64;
  key_derivation_path : vec blob;
  coin_reserved : vec CoinBalance;
  attributes : text;
  address : text;
  nonce : nat64;
  utxos : vec Utxo;
};
type PoolState = record {
  k : nat;
  id : opt text;
  lp : vec record { text; nat };
  lp_earnings : vec record { text; nat64 };
  utxo : opt Utxo;
  total_rune_donation : nat;
  incomes : nat64;
  total_btc_donation : nat64;
  nonce : nat64;
  lp_locks : vec record { text; nat32 };
};
type Result = variant { Ok : record { nat64; nat64 }; Err : text };
type Result_1 = variant { Ok : text; Err : ExchangeError };
type Result_10 = variant { Ok : ExtractFeeOffer; Err : ExchangeError };
type Result_11 = variant { Ok : SwapOffer; Err : ExchangeError };
type Result_12 = variant { Ok : WithdrawalOffer; Err : ExchangeError };
type Result_13 = variant { Ok : vec BlockInfo; Err : text };
type Result_14 = variant { Ok : PoolInfo; Err : ExchangeError };
type Result_15 = variant { Ok : vec TxRecordInfo; Err : text };
type Result_2 = variant { Ok; Err : ExchangeError };
type Result_3 = variant { Ok : text; Err : text };
type Result_4 = variant {
  Ok : vec record { text; Liquidity };
  Err : ExchangeError;
};
type Result_5 = variant { Ok : Liquidity; Err : ExchangeError };
type Result_6 = variant {
  Ok : opt record { opt PoolState; PoolState };
  Err : text;
};
type Result_7 = variant { Ok; Err : text };
type Result_8 = variant { Ok : LiquidityOffer; Err : ExchangeError };
type Result_9 = variant { Ok : DonateIntention; Err : ExchangeError };
type RollbackTxArgs = record { txid : text };
type SwapOffer = record {
  output : CoinBalance;
  nonce : nat64;
  price_impact : nat32;
  input : Utxo;
};
type TxRecord = record { pools : vec text };
type TxRecordInfo = record {
  records : vec text;
  txid : text;
  confirmed : bool;
};
type Utxo = record {
  coins : vec CoinBalance;
  sats : nat64;
  txid : text;
  vout : nat32;
};
type WithdrawalOffer = record {
  nonce : nat64;
  input : Utxo;
  user_outputs : vec CoinBalance;
};
service : {
  blocks_tx_records_count : () -> (Result) query;
  create : (text) -> (Result_1);
  donate_rich_protocol_revenue : () -> (Result_2);
  escape_hatch : (text, text, nat64) -> (Result_3);
  execute_tx : (ExecuteTxArgs) -> (Result_3);
  get_all_lp : (text) -> (Result_4) query;
  get_block : (nat32) -> (opt NewBlockInfo) query;
  get_fee_collector : () -> (text) query;
  get_lp : (text, text) -> (Result_5) query;
  get_max_block : () -> (opt NewBlockInfo) query;
  get_minimal_tx_value : (GetMinimalTxValueArgs) -> (nat64) query;
  get_pool_info : (GetPoolInfoArgs) -> (opt PoolInfo) query;
  get_pool_list : () -> (vec PoolBasic) query;
  get_pool_state_chain : (text, text) -> (Result_6) query;
  get_tx_affected : (text) -> (opt TxRecord) query;
  list_pools : (opt text, nat64) -> (vec PoolInfo) query;
  lock_lp : (text, text, text) -> (Result_2);
  new_block : (NewBlockInfo) -> (Result_7);
  pause : () -> ();
  pre_add_liquidity : (text, CoinBalance) -> (Result_8) query;
  pre_donate : (text, nat64) -> (Result_9) query;
  pre_extract_fee : (text) -> (Result_10) query;
  pre_self_donate : () -> (Result_9) query;
  pre_swap : (text, CoinBalance) -> (Result_11) query;
  pre_withdraw_liquidity : (text, text, nat) -> (Result_12) query;
  query_blocks : () -> (Result_13) query;
  query_pool : (text) -> (Result_14) query;
  query_tx_records : () -> (Result_15) query;
  recover : () -> ();
  rollback_tx : (RollbackTxArgs) -> (Result_7);
  set_donation_amount : (text, nat64, nat) -> (Result_2);
  set_orchestrator : (principal) -> ();
  sync_with_btc : (text, nat64) -> (Result_1);
}
