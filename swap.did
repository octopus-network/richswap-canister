type CoinBalance = record { id : text; value : nat };
type ExchangeError = variant {
  InvalidSignPsbtArgs : text;
  InvalidNumeric;
  Overflow;
  InvalidInput;
  PoolAddressNotFound;
  PoolStateExpired : nat64;
  TooSmallFunds;
  InvalidRuneId;
  InvalidPool;
  InvalidPsbt : text;
  PoolAlreadyExists;
  InvalidTxid;
  InvalidLiquidity;
  EmptyPool;
  LpNotFound;
  ChainKeyError;
  FetchRuneIndexerError;
  InvalidState : text;
  InsufficientFunds;
};
type ExtractFeeOffer = record {
  output : CoinBalance;
  nonce : nat64;
  input : Utxo;
};
type FinalizeTxArgs = record { txid : text; pool_key : text };
type GetPoolInfoArgs = record { pool_address : text };
type GetPoolListArgs = record { from : opt text; limit : nat32 };
type InputCoin = record { coin : CoinBalance; from : text };
type Intention = record {
  input_coins : vec InputCoin;
  output_coins : vec OutputCoin;
  action : text;
  exchange_id : text;
  pool_utxo_spend : vec text;
  action_params : text;
  nonce : nat64;
  pool_utxo_receive : vec text;
  pool_address : text;
};
type IntentionSet = record {
  initiator_address : text;
  intentions : vec Intention;
};
type Liquidity = record { user_share : nat; sqrt_k : nat; btc_supply : nat64 };
type LiquidityOffer = record {
  output : CoinBalance;
  inputs : opt Utxo;
  nonce : nat64;
};
type OutputCoin = record { to : text; coin : CoinBalance };
type PoolInfo = record {
  key : text;
  name : text;
  btc_reserved : nat64;
  coin_reserved : vec CoinBalance;
  attributes : text;
  address : text;
  nonce : nat64;
  utxos : vec Utxo;
};
type PoolOverview = record {
  key : text;
  name : text;
  btc_reserved : nat64;
  coin_reserved : vec CoinBalance;
  address : text;
  nonce : nat64;
};
type Result = variant { Ok : text; Err : ExchangeError };
type Result_1 = variant { Ok : Liquidity; Err : ExchangeError };
type Result_2 = variant { Ok : LiquidityOffer; Err : ExchangeError };
type Result_3 = variant { Ok : ExtractFeeOffer; Err : ExchangeError };
type Result_4 = variant { Ok : SwapOffer; Err : ExchangeError };
type Result_5 = variant { Ok : WithdrawalOffer; Err : ExchangeError };
type Result_6 = variant { Ok : text; Err : text };
type SignPsbtArgs = record {
  zero_confirmed_tx_count_in_queue : nat32;
  txid : text;
  intention_set : IntentionSet;
  intention_index : nat32;
  psbt_hex : text;
};
type SwapOffer = record { output : CoinBalance; nonce : nat64; input : Utxo };
type Utxo = record {
  maybe_rune : opt CoinBalance;
  sats : nat64;
  txid : text;
  vout : nat32;
};
type WithdrawalOffer = record {
  nonce : nat64;
  input : Utxo;
  user_outputs : vec CoinBalance;
};
service : {
  create : (text) -> (Result);
  finalize_tx : (FinalizeTxArgs) -> ();
  get_fee_collector : () -> (text) query;
  get_lp : (text, text) -> (Result_1) query;
  get_min_tx_value : () -> (nat64) query;
  get_minimal_tx_value : (nat8) -> (nat64) query;
  get_pool_info : (GetPoolInfoArgs) -> (opt PoolInfo) query;
  get_pool_list : (GetPoolListArgs) -> (vec PoolOverview) query;
  pre_add_liquidity : (text, CoinBalance) -> (Result_2) query;
  pre_extract_fee : (text) -> (Result_3) query;
  pre_swap : (text, CoinBalance) -> (Result_4) query;
  pre_withdraw_liquidity : (text, text, nat) -> (Result_5) query;
  rollback_tx : (FinalizeTxArgs) -> ();
  set_fee_collector : (text) -> ();
  set_orchestrator : (principal) -> ();
  sign_psbt : (SignPsbtArgs) -> (Result_6);
}
